<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ServerCore</name>
    </assembly>
    <members>
        <member name="T:ServerCore.BufferManager">
            <summary>
            Clase que administra un buffer enorme para seccionarlo y utilizar solamente lo
            necesario en cada envío y recepción de información para después, volver a agregar la sección utilizada.
            De esta manera, siempre se tiene un buffer justo a cada operación y reusable
            </summary>
        </member>
        <member name="F:ServerCore.BufferManager.fullBuffer">
            <summary>        
            Matriz de bytes utilizada como buffer en la operación
            </summary>
        </member>
        <member name="F:ServerCore.BufferManager.bufferSizePerRequest">
            <summary>
            Tamaño del arreglo de bytes usado como buffer en cada operación
            </summary>
        </member>
        <member name="F:ServerCore.BufferManager.bufferIndex">
            <summary>
            indice en el arreglo de byte (buffer).
            </summary>
        </member>
        <member name="F:ServerCore.BufferManager.buffeIndexOffsetStack">
            <summary>
            Pila de indices para el administrador de buffer
            </summary>
        </member>
        <member name="F:ServerCore.BufferManager.totalBytesInBufferToManagement">
            <summary>
            Número de total de bytes controlados por la pila de buffer
            </summary>
        </member>
        <member name="M:ServerCore.BufferManager.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor que inicializa los valores del administrador de buffer
            </summary>
            <param name="totalBytesInBufferToManagement">Número total de bytes que tendrá la pila del buffer</param>
            <param name="bufferSizePerRequest">Tamaño del buffer para la operación</param>
        </member>
        <member name="M:ServerCore.BufferManager.ReleaseBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Remueve el buffer de un objeto SocketAsyncEventArg. Al liberarlo
            lo regresar a la pila de bufferes disponibles para volver a usarlo
            </summary>
            <param name="socketAsyncEventArgs">SocketAsyncEventArgs en donde está el buffer que se quiere remover</param>
        </member>
        <member name="M:ServerCore.BufferManager.InitializeBuffer">
            <summary>
             Asigna el espacio de buffer usado por la pila de buffer
            </summary>
        </member>
        <member name="M:ServerCore.BufferManager.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Asigna un buffer desde la pila de bufferes para el objeto SocketAsyncEventArgs específico
            </summary>
            <param name="socketAsyncEventArgs">SocketAsyncEventArgs donde el buffer se asignará</param>
            <returns>True si el buffer fue correctamente asignado</returns>
        </member>
        <member name="T:ServerCore.ProviderStateManager`1">
            <summary>
            Clase que controla el almacenado y asignación de estados de un socket, que sirven en 
            las operaciones de entrada y salida de dicho socket asincronamente
            </summary>
            <typeparam name="X">Instancia de la clase estadoDelClienteBase</typeparam>
        </member>
        <member name="F:ServerCore.ProviderStateManager`1.providerStatesStack">
            <summary>
            El conjunto de estados se almacena como una pila
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateManager`1.#ctor(System.Int32)">
            <summary>
            Constructor que inicializa el objeto pilaEstadosSocket con una dimensión máxima
            </summary>
            <param name="providerStatesStackCapacity">Máximo número de objetos que la pila de estados podrá almacenar</param>
        </member>
        <member name="P:ServerCore.ProviderStateManager`1.StackCount">
            <summary>
            Variable que contiene el número de elementos en la pila 
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateManager`1.GetStackItem">
            <summary>
            Obtiene un estadoDelClienteBase de la pila de estados del cliente
            </summary>
            <returns>Objeto de la pila que es también removido mientras se usa</returns>
        </member>
        <member name="M:ServerCore.ProviderStateManager`1.SetStackItem(`0)">
            <summary>
            Ingresa un estadoDelClienteBase a la pila de estados del cliente
            </summary>
            <param name="providerStateBase">Objeto de EstadoDelClienteBase a ingresar</param>
        </member>
        <member name="T:ServerCore.ClientStatesMananger`1">
            <summary>
            Clase que controla el almacenado y asignación de estados de un socket, que sirven en 
            las operaciones de entrada y salida de dicho socket asincronamente
            </summary>
            <typeparam name="T">Instancia de la clase estadoDelClienteBase</typeparam>
        </member>
        <member name="F:ServerCore.ClientStatesMananger`1.clientStatesStack">
            <summary>
            El conjunto de estados se almacena como una pila
            </summary>
        </member>
        <member name="M:ServerCore.ClientStatesMananger`1.#ctor(System.Int32)">
            <summary>
            Constructor que inicializa el objeto pilaEstadosSocket con una dimensión máxima
            </summary>
            <param name="clientStatesStackCapacity">Máximo número de objetos que la pila de estados podrá almacenar</param>
        </member>
        <member name="P:ServerCore.ClientStatesMananger`1.ClientStatesStackCount">
            <summary>
            Variable que contiene el número de elementos en la pila 
            </summary>
        </member>
        <member name="M:ServerCore.ClientStatesMananger`1.GetStackItem">
            <summary>
            Obtiene un estadoDelClienteBase de la pila de estados del cliente
            </summary>
            <returns>Objeto de la pila que es también removido mientras se usa</returns>
        </member>
        <member name="M:ServerCore.ClientStatesMananger`1.SetStackItem(`0)">
            <summary>
            Ingresa un estadoDelClienteBase a la pila de estados del cliente
            </summary>
            <param name="clientStateBase">Objeto de EstadoDelClienteBase a ingresar</param>
        </member>
        <member name="T:ServerCore.ServerConfiguration">
            <summary>
            Contiene todas las constantes del sistema relavantes
            </summary>
        </member>
        <member name="F:ServerCore.ServerConfiguration.LIMITE_BYTES_CONTADOR">
            <summary>
            Limite para el marcador de bytes procesados en el servidor
            </summary>
        </member>
        <member name="F:ServerCore.ServerConfiguration.testMode">
            <summary>
            Variable que indicará si el server entra en modo test.
            El modo Test, responderá a toda petición bien formada, con una código de autorización 
            y respuesta simulado sin enviar la trama a un proveedor externo
            </summary>
        </member>
        <member name="F:ServerCore.ServerConfiguration.routerMode">
            <summary>
            Activación para que el servidor pueda enviar mensajes a otro proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ServerConfiguration.clientTimeOut">
            <summary>
            TimeOut en segundos sobre cualquier petición de un cliente
            </summary>
        </member>
        <member name="M:ServerCore.Classes.LogTrace.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="nombreLog">Nombre del event log en el sistema. Nota: se debe ejecutar con privilegios de administrador la aplicación</param>
        </member>
        <member name="M:ServerCore.Classes.LogTrace.CrearLog">
            <summary>
            Crea el log por defecto del sistema
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerCore.Classes.LogTrace.EscribirLog(System.String,ServerCore.Constants.ServerCoreConstants.LogType)">
            <summary>
            Funcion que el guardado de logs en el event log de windows
            </summary>
            <param name="mensaje"></param>
            <param name="tipoLog"></param>
        </member>
        <member name="F:ServerCore.Classes.Security.PROGRAM">
            <summary>
            Nombre del programa
            </summary>
        </member>
        <member name="F:ServerCore.Classes.Security.processorId">
            <summary>
            Id del procesador del equipo
            </summary>
        </member>
        <member name="F:ServerCore.Classes.Security.product">
            <summary>
            Producto que se ejecuta
            </summary>
        </member>
        <member name="F:ServerCore.Classes.Security.manufacturer">
            <summary>
            información del fabricante
            </summary>
        </member>
        <member name="F:ServerCore.Classes.Security.licence">
            <summary>
            Toda la licencia
            </summary>
        </member>
        <member name="P:ServerCore.Classes.Security.LogTrace">
            <summary>
            Instancia para utilizar el log
            </summary>
        </member>
        <member name="M:ServerCore.Classes.Security.#ctor(ServerCore.Classes.ILogTrace)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="logTrace">Instancia de ServerCore.Classes.LogTrace</param>
        </member>
        <member name="T:ServerCore.Classes.Security.LicencePropiertiesParse">
            <summary>
            Información de la licencia
            </summary>
        </member>
        <member name="M:ServerCore.Classes.Security.ValidatePermissions">
            <summary>
            Valida que la licencia esté vigente
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerCore.Classes.Security.DesencryptConfirgurationParameters(System.String@,System.String@,System.String@,System.String@)">
            <summary>
            Desencripta los valores obtenidos del archivo de licencia
            </summary>
            <param name="program">nombre del programa a validar</param>
            <param name="processorId">id del procesador del equipo</param>
            <param name="product">numero de serie o producto del equipo</param>
            <param name="manufacturer">nombre de manufactura</param>
            <returns></returns>
        </member>
        <member name="M:ServerCore.Classes.Security.GetLicenceFile">
            <summary>
            Obtiene el archivo de licencia de la ubicación de la aplicación
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerCore.Classes.Security.GetMachineInformation">
            <summary>
            Obtiene la información de la PC que se requiere para el funcionamiento del server
            </summary>
            <returns></returns>
        </member>
        <member name="M:ServerCore.Classes.Security.RunQuery(System.String,System.String)">
            <summary>
            Ejecuta una consulta al sistema
            </summary>
            <param name="TableName"></param>
            <param name="MethodName"></param>
            <returns></returns>
        </member>
        <member name="T:ServerCore.ProviderStateBase">
            <summary>
            Clase que contiene las propiedades de un proveedor en el flujo del servidor
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.socketMainReference">
            <summary>
            Referencia al servidor de socket principal
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.socketAsyncEventArgs">
            <summary>
            SocketAsyncEventArgs que se utilizará en la recepción
            </summary>
        </member>
        <member name="P:ServerCore.ProviderStateBase.SocketToWork">
            <summary>
            Socket asignado de trabajo sobre la conexión del cliente
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.responseCode">
            <summary>
            Codigo de respuesta sobre el proceso del cliente
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.authorizationCode">
            <summary>
            Codigo de autorización sobre el proceso del cliente
            </summary>
        </member>
        <member name="P:ServerCore.ProviderStateBase.ClientStateOriginal">
            <summary>
            Estado del cliente desde donde proviene la petición para un retorno
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.requestMessage">
            <summary>
            Trama de petición a un proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.responseMessage">
            <summary>
            Trama de respuesta de un proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.objectRequest">
            <summary>
            Objeto genérico donde se almacena la clase donde se encuentran los valores de petición de un proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.objectResponse">
            <summary>
            Objeto genérico donde se almacena la clase donde se encuentran los valores de respuesta de un proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ProviderStateBase.providerTimer">
            <summary>
            Timer del lado del proveedor para medir el tiempo de respuesta sobre una petición
            </summary>
        </member>
        <member name="P:ServerCore.ProviderStateBase.IsTimeOver">
            <summary>
            Bandera para indicar que hubo un vencimiento de TimeOut  y poder controlar la respuesta
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.Initialize">
            <summary>
            Función virtual para poder sobre escribirla, sirve para limpiar e inicializar 
            todas las variables del info y socket de trabajo
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.SetObjectRequestClient(System.Object)">
            <summary>
            Ingresa de forma segura el valor de la instancia de socket principal para un retorno de flujo
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ServerCore.ProviderStateBase.ProcessProviderMessage(System.String)">
            <summary>
            Función virtual para poder sobre escribirla, en esta se controla
            toda la operación sobre el mensaje del cliente así como su mensaje de respuesta
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.SetMainSocketReference(System.Object)">
            <summary>
            Funcion en la que se va a indicar cuál fue el socket principal sobre el cual
            se inició toda la operación
            </summary>
            <param name="mainSocket"> proceso donde se encuentra el socket principal del cuál se desprende el socket de trabajo por cliente</param>
        </member>
        <member name="M:ServerCore.ProviderStateBase.GetRequestMessage">
            <summary>
            Función que obtiene la trama de petición al proveedor
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.GetResponseMessage">
            <summary>
            Función que obtiene la trama de respuesta de una proveedor
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.SaveTransaction">
            <summary>
            Función que guardará un registro en base de datos cuando el servidor esté en modo router
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.SetTimeOver">
            <summary>
            Función que se utiliza para marcar un timeout de forma segura
            </summary>
        </member>
        <member name="M:ServerCore.ProviderStateBase.RestartTimeOut">
            <summary>
            Función que se utiliza para desmarcar la bandera de timeout de forma segura
            </summary>
        </member>
        <member name="T:ServerCore.IClienteStateBase">
            <summary>
            Clase contiene toda la información relevante de un cliente así como un socket
            que será el de trabajo para el envío y recepción de mensajes
            </summary>
        </member>
        <member name="P:ServerCore.IClienteStateBase.UniqueId">
            <summary>
            Identificador único para un cliente
            </summary>
        </member>
        <member name="P:ServerCore.IClienteStateBase.ClientIp">
            <summary>
            Ip del cliente de donde se recibe el mensaje
            </summary>
        </member>
        <member name="P:ServerCore.IClienteStateBase.ClientPort">
            <summary>
            Puerto del cliente por donde se recibe el mensaje
            </summary>
        </member>
        <member name="P:ServerCore.IClienteStateBase.SocketToWork">
            <summary>
            Socket asignado de trabajo sobre la conexión del cliente
            </summary>
        </member>
        <member name="P:ServerCore.IClienteStateBase.TimeOut">
            <summary>
            Tiempo de espera general del lado del cliente
            </summary>
        </member>
        <member name="M:ServerCore.IClienteStateBase.SaveTransaction">
            <summary>
            Función que podrá guardar un registro en base de datos 
            o en cuyo caso, si está en modo router el servidor, actualizar un registro previamente guardado
            </summary>
        </member>
        <member name="M:ServerCore.IClienteStateBase.GetResponseMessage">
            <summary>
            Función para obtener la trama de respuesta al cliente dependiendo de su mensajería entrante
            </summary>
        </member>
        <member name="M:ServerCore.IClienteStateBase.ProcessMessage(System.String)">
            <summary>
            Función virtual para poder sobre escribirla, en esta se controla
            toda la operación sobre el mensaje del cliente así como su mensaje de respuesta
            </summary>
            <param name="mensajeCliente">Mensaje que se recibe de un cliente</param>
        </member>
        <member name="T:ServerCore.IProviderStateBase">
            <summary>
            Clase que contiene las propiedades de un proveedor en el flujo del servidor
            </summary>
        </member>
        <member name="M:ServerCore.IProviderStateBase.SaveTransaction">
            <summary>
            Función que guardará la operación con el proveedor
            </summary>
        </member>
        <member name="M:ServerCore.IProviderStateBase.SetObjectRequestClient(System.Object)">
            <summary>
            Ingresa de forma segura el valor de la instancia de socket principal para un retorno de flujo
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ServerCore.IProviderStateBase.GetRequestMessage">
            <summary>
            Función que obtiene la trama de petición al proveedor
            </summary>
        </member>
        <member name="M:ServerCore.IProviderStateBase.GetResponseMessage">
            <summary>
            Función que obtiene la trama de respuesta de una proveedor
            </summary>
        </member>
        <member name="M:ServerCore.IProviderStateBase.ProcessProviderMessage(System.String)">
            <summary>
            Función virtual para poder sobre escribirla, en esta se controla
            toda la operación sobre el mensaje del cliente así como su mensaje de respuesta
            </summary>
        </member>
        <member name="T:ServerCore.IServerCore`3">
            <summary>
            Clase principal sobre el core del servidor transaccional, contiene todas las propiedades 
            del servidor y los métodos de envío y recepción asincronos
            </summary>
            <typeparam name="T">Instancia sobre la clase que contiene la información de un cliente conectado y su
            socket de trabajo una vez asignado desde el pool</typeparam>    
            <typeparam name="X">Instancia sobre la clase que contiene la información de un cliente conectado y su
            socket de trabajo una vez asignado desde el pool</typeparam>
        </member>
        <member name="P:ServerCore.IServerCore`3.ServerStateBase">
            <summary>
            Obtiene o ingresa el estado del socket del servidor
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.PendingClientsToDisconnect">
            <summary>
            Obtiene o ingresa a la lista de clientes pendientes de desconexión, esta lista es para la verificación de que todos los cliente
            se desconectan adecuadamente, su uso es más para debug
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.ServerListeningIp">
            <summary>
            IP de escucha de la aplicación  para recibir mensajes
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.ProviderIp">
            <summary>
            Ip a la cual se apuntarán todas las transacciones del proveedor
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.ClientsConnectedCounter">
            <summary>
            Obtiene el número de clientes conectados actualmente al servidor
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.ResourcesAvailableCounterPerClient">
            <summary>
            Numero que muestra cuantas conexiones puede aún soportar el servidor del lado del cliente
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.ResourcesAvailableCounterPerProvider">
            <summary>
            Numero que muestra cuantas conexiones puede aún soportar el servidor del lado del proveedor
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.MaximumConnectionsPerClient">
            <summary>        
            Obtiene o ingresa el número máximo de conexiones simultaneas de una misma IP del cliente (0=ilimitadas)
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.PendingProvidersToDisconnect">
            <summary>
            Obtiene o ingresa a la lista de proveedores pendientes de desconexión, esta lista es para la verificación de que todos los proveedores
            se desconectan adecuadamente, su uso es más para debug pero queda para mejorar
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.ProvidersPorts">
            <summary>
            Lista de puertos en la IP configurada al proveedor para el envío de la mensajería
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.IsRunning">
            <summary>
            Obtiene o ingresa el valor de que si el servidor está o no ejecutandose
            </summary>
        </member>
        <member name="P:ServerCore.IServerCore`3.TotalDeBytesTransferidos">
            <summary>
            Bytes que se han transmitido desde el inicio de la aplicación
            </summary>
        </member>
        <member name="M:ServerCore.IServerCore`3.CloseSocketClient(`0)">
            <summary>
            Cierra el socket asociado a un cliente y retira al cliente de la lista de clientes conectados
            </summary>
            <param name="estadoDelCliente">Instancia del cliente a cerrar</param>
        </member>
        <member name="M:ServerCore.IServerCore`3.CloseSocketProvider(`2)">
            <summary>
            Cierra el socket asociado a un proveedor y retira al proveedor de la lista de conectados
            </summary>
        </member>
        <member name="M:ServerCore.IServerCore`3.PreInitialize(System.Int32)">
            <summary>
            Inicializa el servidor con una pre asignación de buffers reusables y estados de sockets
            </summary>
        </member>
        <member name="M:ServerCore.IServerCore`3.StopServer">
            <summary>
            Se detiene el servidor
            </summary>
        </member>
        <member name="M:ServerCore.IServerCore`3.SendMessageSync(System.String,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Envía un mensaje sincronamente (Discontinuado porque ya se puede hacer asincrono)
            </summary>
            <param name="mensaje">mensaje a enviar</param>
            <param name="e">A client's SocketAsyncEventArgs</param>
        </member>
        <member name="M:ServerCore.IServerCore`3.Start(System.Int32,System.Boolean,System.Boolean,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Se inicia el servidor de manera que esté escuchando solicitudes de conexión entrantes.
            </summary>
            <param name="puertoLocalEscucha">Puerto de escucha para la recepeción de mensajes</param>
            <param name="listaPuertosProveedor">Puertos del proveedor</param>
            <param name="modoTest">Variable que indicará si el server entra en modo test.
            El modo Test, responderá a toda petición bien formada, con una código de autorización
            y respuesta simulado sin enviar la trama a un proveedor externo</param>
            <param name="modoRouter">Activación para que el servidor pueda enviar mensajes a otro proveedor</param>
            <param name="ipProveedor">IP del proveedor a donde se enviarán mensajes en caso de que el modoRouter esté encendido</param>
        </member>
        <member name="T:ServerCore.ServerCore`3">
            <summary>
            Clase principal sobre el core del servidor transaccional, contiene todas las propiedades 
            del servidor y los métodos de envío y recepción asincronos
            </summary>
            <typeparam name="T">Instancia sobre la clase que contiene la información de un cliente conectado y su
            socket de trabajo una vez asignado desde el pool</typeparam>
            <typeparam name="S">Instancia sobre la clase que contiene el estado de flujo de una operación en el servidor</typeparam>
            <typeparam name="X">Instancia sobre la clase que contiene la información de un cliente conectado y su
            socket de trabajo una vez asignado desde el pool</typeparam>
        </member>
        <member name="F:ServerCore.ServerCore`3.peformanceConexionesEntrantes">
            <summary>
            Instancia del performance counter de peticiones entrantes
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._connectedClients">
            <summary>
            Obtiene una lista de clientes ordenados por un GUID
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._maximumConnectionsPerClient">
            <summary>        
            Obtiene o ingresa el número máximo de conexiones simultaneas de una misma IP del cliente (0=ilimitadas)
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.MaximumConnectionsPerClient">
            <summary>        
            Obtiene o ingresa el número máximo de conexiones simultaneas de una misma IP del cliente (0=ilimitadas)
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._isRunning">
            <summary>
            Obtiene o ingresa el valor de que si el servidor está o no ejecutandose
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.IsRunning">
            <summary>
            Obtiene o ingresa el valor de que si el servidor está o no ejecutandose
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ServerStateBase">
            <summary>
            Obtiene o ingresa el estado del socket del servidor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._pPendingClientsToDisconnect">
            <summary>
            Obtiene o ingresa a la lista de clientes pendientes de desconexión, esta lista es para la verificación de que todos los cliente
            se desconectan adecuadamente, su uso es más para debug
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.PendingClientsToDisconnect">
            <summary>
            Obtiene o ingresa a la lista de clientes pendientes de desconexión, esta lista es para la verificación de que todos los cliente
            se desconectan adecuadamente, su uso es más para debug
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._pendingProvidersToDisconnect">
            <summary>
            Obtiene o ingresa a la lista de proveedores pendientes de desconexión, esta lista es para la verificación de que todos los proveedores
            se desconectan adecuadamente, su uso es más para debug pero queda para mejorar
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.PendingProvidersToDisconnect">
            <summary>
            Obtiene o ingresa a la lista de proveedores pendientes de desconexión, esta lista es para la verificación de que todos los proveedores
            se desconectan adecuadamente, su uso es más para debug pero queda para mejorar
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ClientsConnectedCounter">
            <summary>
            Obtiene el número de clientes conectados actualmente al servidor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._providerIp">
            <summary>
            Ip a la cual se apuntarán todas las transacciones del proveedor
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ProviderIp">
            <summary>
            Ip a la cual se apuntarán todas las transacciones del proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._providersPorts">
            <summary>
            Lista de puertos en la IP configurada al proveedor para el envío de la mensajería
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ProvidersPorts">
            <summary>
            Lista de puertos en la IP configurada al proveedor para el envío de la mensajería
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.TotalDeBytesTransferidos">
            <summary>
            Bytes que se han transmitido desde el inicio de la aplicación
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ServerListeningIp">
            <summary>
            IP de escucha de la aplicación  para recibir mensajes
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._maxRetrasoParaEnvio">
            <summary>
            Retraso en el envío, es para uso en Debug
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ResourcesAvailableCounterPerClient">
            <summary>
            Numero que muestra cuantas conexiones puede aún soportar el servidor del lado del cliente
            </summary>
        </member>
        <member name="P:ServerCore.ServerCore`3.ResourcesAvailableCounterPerProvider">
            <summary>
            Numero que muestra cuantas conexiones puede aún soportar el servidor del lado del proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3._RandomPorts">
            <summary>
            Auxiliar para el conteo de puertos y su balanceo de salida
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.maximumSimultaneousConnectionsClientSide">
            <summary>
            Número de conexiones simultaneas que podrá manejar el servidor por defecto
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.PRE_SOCKETS_DEFAULT">
            <summary>
            Número sockest para lectura y escritura sin asignación de espacio del buffer para aceptar peticiones como default
            esto para tener siempre por lo menos sockects disponibles al inicio del servidor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.clientStatesManager">
            <summary>
            instancia al administrador de estados de socket de trabajo
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.providerStatesManager">
            <summary>
            Instancia del administrador de estados del proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.semaphoreClientResourses">
            <summary>
            semáforo sobre las peticiones de clientes para controlar el número total que podrá soportar el servidor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.semaphoreProviderResourses">
            <summary>
            semáforo sobre las peticiones a proveedores para controlar el número total que podrá soportar el servidor
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.totalBytesReceived">
            <summary>
            Número total de bytes recibido en el servidor, para uso estadístico
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.bufferManager">
            <summary>
            Representa un conjunto enorme de buffer reutilizables entre todos los sockects de trabajo
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.mainSocketListening">
            <summary>
            Socket de escucha para las conexiones de clientes
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.disconnecting">
            <summary>
            Bandera para identificar que la conexión está bien establecida
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.backLog">
            <summary>
            Parámetros que  indica el máximo de pedidos que pueden encolarse simultáneamente en caso que el servidor 
            esté ocupado atendiendo una nueva conexión.
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.bufferSizePerRequest">
            <summary>
            Tamaño del buffer por petición
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.PERMISSION_DENIED">
            <summary>
            Mensaje de aviso
            </summary>
        </member>
        <member name="F:ServerCore.ServerCore`3.logListener">
            <summary>
            Log del sistema
            </summary>
        </member>
        <member name="M:ServerCore.ServerCore`3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Crea una instancia del administrador de sockets, posterior se tiene que llamar al método
            ConfigInicioServidor para iniciar el proceso de asignacion de recursos        
            </summary>
            <param name="maximumSimultaneousConnections">Maximo número de conexiones simultaneas a manejar en el servidor</param>
            <param name="BufferSize">Tamaño del buffer por conexión, un parámetro standart es 1024</param>
            <param name="backlog">Parámetro TCP/IP backlog, el recomendable es 100</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.PreInitialize(System.Int32)">
            <summary>
            Inicializa el servidor con una pre asignación de buffers reusables y estados de sockets
            </summary>
            <param name="timeOutClientSide">Tiempo en segundos de espera antes de cancelar una respuesta por tiempo excedido en el proceso</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.Start(System.Int32,System.Boolean,System.Boolean,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Se inicia el servidor de manera que esté escuchando solicitudes de conexión entrantes.
            </summary>
            <param name="listeningPort">Puerto de escucha para la recepeción de mensajes</param>
            <param name="providerPorts">Puertos del proveedor</param>
            <param name="testMode">Variable que indicará si el server entra en modo test.
            El modo Test, responderá a toda petición bien formada, con una código de autorización
            y respuesta simulado sin enviar la trama a un proveedor externo</param>
            <param name="routerMode">Activación para que el servidor pueda enviar mensajes a otro proveedor</param>
            <param name="providerIp">IP del proveedor a donde se enviarán mensajes en caso de que el modoRouter esté encendido</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.StartsConnections(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Se inicia la operación de aceptar solicitudes por parte de un cliente
            </summary>
            <param name="saeaStartsConnections">Objeto que se utilizará en cada aceptación de una solicitud</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.StartsConnectionsCallBack(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Procesa la solicitud por medio de socket principal de escucha
            </summary>
            <param name="sender">Objeto que se tomará como quien dispara el evento principal</param>
            <param name="saeaStartsConnections">SocketAsyncEventArg asociado al proceso asincrono.</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ReceiveSendProcessCallBack(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Operación de callBack que se llama cuando se envía o se recibe de un socket de asincrono para completar la operación
            </summary>
            <param name="sender">Objeto principal para devolver la llamada</param>
            <param name="saea">SocketAsyncEventArg asociado a la operación de envío o recepción</param>        
        </member>
        <member name="M:ServerCore.ServerCore`3.ProcessMessageReceiveClient(`0)">
            <summary>
            Este método se invoca cuando la operación de recepción asincrona se completa y si el cliente
            cierra la conexión el socket también se cierra y se libera
            </summary>
            <param name="clientState">Objeto que tiene la información y socket de trabajo del cliente</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ResponseToClient(`0)">
            <summary>
            Función que entrega una respuesta al cliente por medio del socket de conexión
            </summary>
            <param name="clientState">Estado del cliente con los valores de retorno</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ReceiveSendCycleProcessClientSide(`0)">
            <summary>
            Función callback que se utiliza cuando en un proceso ciclico de envio y recepción
            </summary>
            <param name="clientState">Objeto con la información y socket de trabajo de cliente</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.CloseSocketClient(`0)">
            <summary>
            Cierra el socket asociado a un cliente y retira al cliente de la lista de clientes conectados
            </summary>
            <param name="clientState">Instancia del cliente a cerrar</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ProviderConexionCallBack(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Funcion callback para la conexión al proveedor
            </summary>
            <param name="sender"></param>
            <param name="socketAsyncEventArgs"></param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ReceiveSendOutputProcessCallBack(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Función call back para el evento de envío y recepción al proveedor
            </summary>
            <param name="sender"></param>
            <param name="socketAsyncEventArgs"></param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ReceiveSendOutputCicleProcessProvider(`2)">
            <summary>
            Función para procesar el envío al proveedor y dejar de nuevo en escucha al socket
            </summary>
            <param name="providerState">Estado del proveedor con la información de conexión</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.ProcessMessageReceiveProvider(`2)">
            <summary>
            Función que realiza la recepción del mensaje y lo procesa
            </summary>
            <param name="providerState">Estado del proveedor con la información de conexión</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.CloseSocketProvider(`2)">
            <summary>
            Cierra el socket asociado a un proveedor y retira al proveedor de la lista de conectados
            </summary>
        </member>
        <member name="M:ServerCore.ServerCore`3.TickTimer(System.Object)">
            <summary>
            Evento asincrono del timer para medir el timeout del servidor
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:ServerCore.ServerCore`3.IsTimeOver(`0)">
            <summary>
            Verificación del tiempo de la transacción sobre el proceso del clente
            </summary>
            <param name="estadoDelCliente">instancia del estado del cliente</param>
            <returns></returns>
        </member>
        <member name="M:ServerCore.ServerCore`3.SendMessageSync(System.String,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Envía un mensaje sincronamente (Discontinuado porque ya se puede hacer asincrono)
            </summary>
            <param name="mensaje">mensaje a enviar</param>
            <param name="e">A client's SocketAsyncEventArgs</param>
        </member>
        <member name="M:ServerCore.ServerCore`3.StopServer">
            <summary>
            Se detiene el servidor
            </summary>
        </member>
        <member name="T:ServerCore.ClientBlocked">
            <summary>
            Clase que contiene las propiedades y métodos para poder agregar a la lista de clientes bloqueados
            </summary>
        </member>
        <member name="P:ServerCore.ClientBlocked.BlockedIp">
            <summary>
            IP del cliente a bloquear
            </summary>
        </member>
        <member name="M:ServerCore.ClientBlocked.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ServerCore.ClientBlocked.#ctor(System.Net.IPAddress,System.String,System.Double,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="ip">Ip del cliente a bloquear</param>
            <param name="razonBloqueo">La razón del bloqueo</param>
            <param name="segundosDeBloqueo">tiempo en segundos que durará el bloqueo</param>
            <param name="estaActivoBloqueo">Variable para indicar que se activa o desactiva el bloqueo para la IP</param>
        </member>
        <member name="P:ServerCore.ClientBlocked.BlocketJustification">
            <summary>
            Motivo por el que se bloquea la IP
            </summary>
        </member>
        <member name="P:ServerCore.ClientBlocked.LockUpTime">
            <summary>
            Tiempo en segundos que se va a bloquear la IP: 0 => bloqueo permanente
            </summary>
        </member>
        <member name="P:ServerCore.ClientBlocked.DateTimeBlocket">
            <summary>
            Fecha y hora en que fue bloqueado
            </summary>
        </member>
        <member name="P:ServerCore.ClientBlocked.IsBlocked">
            <summary>
            Get or set if ban is active
            </summary>
        </member>
        <member name="T:ServerCore.ServerStateBase">
            <summary>
            Clase que contiene las funciones que se utilizan para indicar el flujo de una operación con el cliente en el servidor
            </summary>
        </member>
        <member name="M:ServerCore.ServerStateBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:ServerCore.ServerStateBase.MainProcess">
            <summary>
            Referencia al proceso principal donde se encuentra el socket principal que disparó el flujo
            </summary>
        </member>
        <member name="M:ServerCore.ServerStateBase.WelcomeMessage(System.Object)">
            <summary>
            Función virtual para sobre escribirla que se utiliza cuando se requiera un mensaje de
            bienvenida a una conexión de un cliente
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ServerCore.ServerStateBase.OnStart">
            <summary>
            función virtual para sobre escribirla que se utiliza para indicar el principio del flujo
            </summary>
        </member>
        <member name="M:ServerCore.ServerStateBase.OnClientClosed(System.Object)">
            <summary>
            función virtual para sobre escribirla que se utiliza para indicar en el flujo que un cliente se cierra
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ServerCore.ServerStateBase.OnConnection">
            <summary>
            función virtual para sobre escribirla que se utiliza para indicar en el flujo que hay una conexión
            </summary>
        </member>
        <member name="M:ServerCore.ServerStateBase.OnAcept(System.Object)">
            <summary>
            función virtual para sobre escribirla que se utiliza indicar en el flujo que se acepta una solicitud de mensaje
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ServerCore.ServerStateBase.OnReceive">
            <summary>
            función virtual para sobre escribirla que se utiliza indicar en el flujo que se ha recibido un mensaje
            </summary>
        </member>
        <member name="M:ServerCore.ServerStateBase.OnSend">
            <summary>
            función virtual para sobre escribirla que se utiliza indicar en el flujo que se ha enviado un mensaje
            </summary>
        </member>
        <member name="T:ServerCore.ClientStateBase">
            <summary>
            Clase contiene toda la información relevante de un cliente así como un socket
            que será el de trabajo para el envío y recepción de mensajes
            </summary>
        </member>
        <member name="P:ServerCore.ClientStateBase.UniqueId">
            <summary>
            Identificador único para un cliente
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.SocketMainReference">
            <summary>
            Referencia al servidor de socket principal
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.socketAsyncEventArgs">
            <summary>
            SocketAsyncEventArgs que se utilizará en la recepción
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.responseMessage">
            <summary>        
            trama de respuesta al cliente
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.sentEventWaitHandle">
            <summary>        
            evento para sincronización de procesos, con este manejador de evento controlo
            el flujo cuando el fin de un envío ocurre
            </summary>
        </member>
        <member name="P:ServerCore.ClientStateBase.ClientIp">
            <summary>
            Ip del cliente
            </summary>
        </member>
        <member name="P:ServerCore.ClientStateBase.ClientPort">
            <summary>
            Puerto del cliente
            </summary>
        </member>
        <member name="P:ServerCore.ClientStateBase.SocketToWork">
            <summary>
            Socket asignado de trabajo sobre la conexión del cliente
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.responseCode">
            <summary>
            Codigo de respuesta sobre el proceso del cliente
            Solo debe ser utilizado en conjunto con el enumerado CodigosRespuesta exclusivo para el Core en la clase utileria
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.authorizationCode">
            <summary>
            Codigo de autorización sobre el proceso del cliente
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.objectClientRequest">
            <summary>
            Objeto genérico donde se almacena la clase donde se encuentran los valores de petición de un cliente
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.objectClientResponse">
            <summary>
            Objeto genérico donde se almacena la clase donde se encuentran los valores de respuesta de un cliente
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.objectProviderRequest">
            <summary>
            Cualquier instancia de clase que se haya creado como entidad de solicitud del proveedor
            </summary>
        </member>
        <member name="F:ServerCore.ClientStateBase.objectProviderResponse">
            <summary>
            Cualquier instancia de clase que se haya creado como entidad de respuesta a una solicitud del proveedor
            </summary>
        </member>
        <member name="P:ServerCore.ClientStateBase.DateTimeReceiveMessage">
            <summary>
            Fecha marcada como inicio de operaciones con el cliente
            </summary>
        </member>
        <member name="P:ServerCore.ClientStateBase.TimeOut">
            <summary>
            Tiempo de espera general del lado del cliente
            </summary>
        </member>
        <member name="M:ServerCore.ClientStateBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ServerCore.ClientStateBase.Initialize">
            <summary>
            Función virtual para poder sobre escribirla, sirve para limpiar e inicializar 
            todas las variables del info y socket de trabajo
            </summary>
        </member>
        <member name="M:ServerCore.ClientStateBase.ProcessMessage(System.String)">
            <summary>
            Función virtual para poder sobre escribirla, en esta se controla
            toda el proceso del mensaje del cliente.
            Al final del proceso, la variable CodigoRespuesta, debe contener alguno de los valores
            del enumerado CodigosRespuesta exclusivo del Core en la clase utileria
            </summary>
            <param name="clientMessage">Mensaje que se recibe de un cliente sin formato</param>
            <remarks>El objeto objSolicitud debe contener la referencia de la clase utilizada como receptora del mensaje del cliente
            El objeto objRespuesa debe contener la referencia de la clase utilizada como respuesta al mensaje del cliente</remarks>
        </member>
        <member name="M:ServerCore.ClientStateBase.SetSocketMainReference(System.Object)">
            <summary>
            Funcion en la que se va a indicar cuál fue el socket principal sobre el cual
            se inició toda la operación
            </summary>
            <param name="mainSocket"> proceso donde se encuentra el socket principal del cuál se desprende el socket de trabajo por cliente</param>
        </member>
        <member name="M:ServerCore.ClientStateBase.GetResponseMessage">
            <summary>
            Función para obtener la trama de respuesta al cliente dependiendo de su mensajería entrante
            </summary>
        </member>
        <member name="M:ServerCore.ClientStateBase.SaveTransaction">
            <summary>
            Función que podrá guardar un registro en base de datos 
            o en cuyo caso, si está en modo router el servidor, actualizar un registro previamente guardado
            </summary>
        </member>
        <member name="M:ServerCore.ClientStateBase.SetResponseInProcess">
            <summary>
            Función que indica que hay una respuesta en proceso de envío al cliente
            </summary>
        </member>
        <member name="M:ServerCore.ClientStateBase.SetResponseCompleted">
            <summary>
            indica que no hay un proceso activo de envío de respuesta al cliente
            </summary>
        </member>
        <member name="T:ServerCore.Constants.ServerCoreConstants">
            <summary>
            Compendio de enumerados y funciones de ayuda al Core
            </summary>
        </member>
        <member name="T:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes">
            <summary>
            Enumerado de códigos de respuesta exclusivos del Core
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.ProcessSuccess">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.TransactionDenied">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.NetworkError">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.InternalTimeOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.FormatError">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.ProcessError">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.SocketCriticalError">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.ClientBlocked">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.ConnectErrorProvider">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.NoResponseProvider">
            <summary>
            
            </summary>
        </member>
        <member name="F:ServerCore.Constants.ServerCoreConstants.ProcessResponseCodes.ProviderDown">
            <summary>
            
            </summary>
        </member>
        <member name="T:ServerCore.Constants.ServerCoreConstants.LogType">
            <summary>
            Tipo de log a escribir
            </summary>
        </member>
    </members>
</doc>
