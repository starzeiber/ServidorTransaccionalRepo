INICIALIZAR SERVIDOR
Se inicia el servidor colocando puertos e ip de escucha
Se le indica el tamaño del buffer enorme y el tamaño de cada sección como buffer para cada envío y recepción individual
Al iniciar el servidor, se crea un estado de cuenta, se inicializa y se queda en espera
Se crea un SocketAsyncEventArgs para recepción y se inicializa el UserToken con el estado del cliente que quedó pendiente
Se asigna una sección del buffer enorme al SocketAsyncEventArgs de recepción 
posterior se asigna el SocketAsyncEventArgs de recepción dentro del estado del cliente en el SocketAsyncEventArgs de recepción correspondiente
El truco está en que el UserToken del SocketAsyncEventArgs que se crea, sea el mismo estado del cliente para no estar creando instancias del heap y reutilizar
Los mismos pasos se realizan para el SocketAsyncEventArgs de envío con el mismo estado del cliente
Por último, se ingresa el estado de cliente ya completo a la pila de estado de clientes disponibles para la cantidad establecida como # de conexiones simultaneas

PROCESAMIENTO DE TRAMA
El proceso de socket para ponerlo escucha es el estandar, es el socket principal para abrir puerto
Después se colocar el socket en escucha se llama a la función iniciarAceptaciones() con parámetro en null para indicar que no hay cliente aún conectado
En la función se inicializa el SocketAsyncEventArgs de aceptación de conexión y se le indica el manejador de evento asincrono
Si existiera un parametro de entrada como instancia SocketAsyncEventArgs se limpia el socket de trabajo porque se va a reutilizar
Se coloca el socket principial en su evento asincrono de aceptación y cuando responda que sí se envía a la función procesarSolicitudDeAceptacionDeConexion
cuando se procesa incorrectamente la aceptación, el socket principal nuevamente se coloca en iniciar aceptaciones
Si es exitosa el proceso de aceptación se obtiene un estado de cliente de la pila de estados ya configurados
y en el socket de trabajo se le coloca el socket que acaba de aceptar la conexión
Se vuelve a iniciar le función  de aceptación de peticiones con el socket principal
Se inicia la recepción de datos, siempre tendrá su evento OnIOCompleted() para saber cuando se hace el callback
Dentro de OnIOCompleted se verifica si se recibe o se envía por medio del SocketAsyncEventArgs que se ingresa
si se recibe se llamada a la  función procesarRecepcion() y se le envía el estado del cliente
dentro de procesarRecepcion() se obtiene del estado el socket con el que se trabajará
Se obtiene la información del socket y en mismo estado del cliente se envía a la función procesamientoTramaEntrante() donde se realiza toda la operación con la trama
Una vez que se procesó la información se revisa el parametro donde se almacena la respuesta al cliente y se envia al cliente por socketDeTrabajo del estado del mismo
En cambio si se está  enviado, se utiliza el saeaDeEnvio del estado del cliente
Se coloca el evento manual de esperandoEnvio para anunciar que se necesita un envío en cola, se llama a la funcion procesarEnvio quien hace ese ingreso a la cola de envíos
Existe un truco para el echo, dedo que se envía y se recibe a cada petición con el socket abierto, cae en un envío pero se utiliza el saeaDeRecepcion para esa acción, así no se desconecta
